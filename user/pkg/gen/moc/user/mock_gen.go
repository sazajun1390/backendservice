// Code generated by MockGen. DO NOT EDIT.
// Source: ./buf/user/v1/userv1connect/api.connect.go
//
// Generated by this command:
//
//	mockgen -source=./buf/user/v1/userv1connect/api.connect.go -destination=./moc/user/mock_gen.go -package=user UserService
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	userv1 "github.com/sazajun1390/backendservice/user/pkg/gen/buf/user/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
	isgomock struct{}
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceClient) CreateUser(arg0 context.Context, arg1 *connect.Request[userv1.CreateUserRequest]) (*connect.Response[userv1.CreateUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[userv1.CreateUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceClientMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserServiceClient) GetUser(arg0 context.Context, arg1 *connect.Request[userv1.GetUserRequest]) (*connect.Response[userv1.GetUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[userv1.GetUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceClientMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceClient)(nil).GetUser), arg0, arg1)
}

// VerifyUser mocks base method.
func (m *MockUserServiceClient) VerifyUser(arg0 context.Context, arg1 *connect.Request[userv1.VerifyUserRequest]) (*connect.Response[userv1.VerifyUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[userv1.VerifyUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockUserServiceClientMockRecorder) VerifyUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockUserServiceClient)(nil).VerifyUser), arg0, arg1)
}

// MockUserServiceHandler is a mock of UserServiceHandler interface.
type MockUserServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceHandlerMockRecorder
	isgomock struct{}
}

// MockUserServiceHandlerMockRecorder is the mock recorder for MockUserServiceHandler.
type MockUserServiceHandlerMockRecorder struct {
	mock *MockUserServiceHandler
}

// NewMockUserServiceHandler creates a new mock instance.
func NewMockUserServiceHandler(ctrl *gomock.Controller) *MockUserServiceHandler {
	mock := &MockUserServiceHandler{ctrl: ctrl}
	mock.recorder = &MockUserServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceHandler) EXPECT() *MockUserServiceHandlerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceHandler) CreateUser(arg0 context.Context, arg1 *connect.Request[userv1.CreateUserRequest]) (*connect.Response[userv1.CreateUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[userv1.CreateUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceHandlerMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceHandler)(nil).CreateUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserServiceHandler) GetUser(arg0 context.Context, arg1 *connect.Request[userv1.GetUserRequest]) (*connect.Response[userv1.GetUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[userv1.GetUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceHandlerMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceHandler)(nil).GetUser), arg0, arg1)
}

// VerifyUser mocks base method.
func (m *MockUserServiceHandler) VerifyUser(arg0 context.Context, arg1 *connect.Request[userv1.VerifyUserRequest]) (*connect.Response[userv1.VerifyUserResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[userv1.VerifyUserResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockUserServiceHandlerMockRecorder) VerifyUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockUserServiceHandler)(nil).VerifyUser), arg0, arg1)
}
