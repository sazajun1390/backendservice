// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package user

import (
	"context"
	"database/sql"
	"time"
)

const getActiveUser = `-- name: GetActiveUser :many
select  user_profiles.user_id, user_profiles.user_multi_id, user_profiles.resource_id, user_profiles.email, user_profiles.password, user_profiles.post_code, user_profiles.address, user_profiles.address_kana, user_profiles.tel, user_profiles.created_at, user_profiles.updated_at, user_profiles.deleted_at, user_profiles.purged_expires_at, user_actives.created_at as activated_at from user_profiles inner join users on user_profiles.user_id = users.id right join user_actives on users.id = user_actives.user_id right join user_provision on users.id = user_provision.user_id right join user_deletes on users.id = user_deletes.user_id
`

type GetActiveUserRow struct {
	UserID          int64          `db:"user_id" json:"user_id"`
	UserMultiID     string         `db:"user_multi_id" json:"user_multi_id"`
	ResourceID      string         `db:"resource_id" json:"resource_id"`
	Email           string         `db:"email" json:"email"`
	Password        string         `db:"password" json:"password"`
	PostCode        string         `db:"post_code" json:"post_code"`
	Address         string         `db:"address" json:"address"`
	AddressKana     string         `db:"address_kana" json:"address_kana"`
	Tel             sql.NullString `db:"tel" json:"tel"`
	CreatedAt       time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time      `db:"updated_at" json:"updated_at"`
	DeletedAt       sql.NullTime   `db:"deleted_at" json:"deleted_at"`
	PurgedExpiresAt sql.NullTime   `db:"purged_expires_at" json:"purged_expires_at"`
	ActivatedAt     time.Time      `db:"activated_at" json:"activated_at"`
}

func (q *Queries) GetActiveUser(ctx context.Context) ([]GetActiveUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getActiveUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveUserRow
	for rows.Next() {
		var i GetActiveUserRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserMultiID,
			&i.ResourceID,
			&i.Email,
			&i.Password,
			&i.PostCode,
			&i.Address,
			&i.AddressKana,
			&i.Tel,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PurgedExpiresAt,
			&i.ActivatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeletedUser = `-- name: GetDeletedUser :many
select user_profiles.user_id, user_profiles.user_multi_id, user_profiles.resource_id, user_profiles.email, user_profiles.password, user_profiles.post_code, user_profiles.address, user_profiles.address_kana, user_profiles.tel, user_profiles.created_at, user_profiles.updated_at, user_profiles.deleted_at, user_profiles.purged_expires_at, user_deletes.created_at as delete_created_at, user_deletes.purged_expires_at as delete_purged_expires_at from user_profiles inner join users on user_profiles.user_id = users.id right join user_actives on users.id = user_actives.user_id right join user_provision on users.id = user_provision.user_id right join user_deletes on users.id = user_deletes.user_id
`

type GetDeletedUserRow struct {
	UserID                int64          `db:"user_id" json:"user_id"`
	UserMultiID           string         `db:"user_multi_id" json:"user_multi_id"`
	ResourceID            string         `db:"resource_id" json:"resource_id"`
	Email                 string         `db:"email" json:"email"`
	Password              string         `db:"password" json:"password"`
	PostCode              string         `db:"post_code" json:"post_code"`
	Address               string         `db:"address" json:"address"`
	AddressKana           string         `db:"address_kana" json:"address_kana"`
	Tel                   sql.NullString `db:"tel" json:"tel"`
	CreatedAt             time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt             time.Time      `db:"updated_at" json:"updated_at"`
	DeletedAt             sql.NullTime   `db:"deleted_at" json:"deleted_at"`
	PurgedExpiresAt       sql.NullTime   `db:"purged_expires_at" json:"purged_expires_at"`
	DeleteCreatedAt       time.Time      `db:"delete_created_at" json:"delete_created_at"`
	DeletePurgedExpiresAt sql.NullTime   `db:"delete_purged_expires_at" json:"delete_purged_expires_at"`
}

func (q *Queries) GetDeletedUser(ctx context.Context) ([]GetDeletedUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeletedUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeletedUserRow
	for rows.Next() {
		var i GetDeletedUserRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserMultiID,
			&i.ResourceID,
			&i.Email,
			&i.Password,
			&i.PostCode,
			&i.Address,
			&i.AddressKana,
			&i.Tel,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PurgedExpiresAt,
			&i.DeleteCreatedAt,
			&i.DeletePurgedExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProvisionUser = `-- name: GetProvisionUser :many
select user_profiles.user_id, user_profiles.user_multi_id, user_profiles.resource_id, user_profiles.email, user_profiles.password, user_profiles.post_code, user_profiles.address, user_profiles.address_kana, user_profiles.tel, user_profiles.created_at, user_profiles.updated_at, user_profiles.deleted_at, user_profiles.purged_expires_at, user_provision.created_at as provision_created_at from user_profiles inner join users on user_profiles.user_id = users.id right join user_actives on users.id = user_actives.user_id right join user_provision on users.id = user_provision.user_id right join user_deletes on users.id = user_deletes.user_id
`

type GetProvisionUserRow struct {
	UserID             int64          `db:"user_id" json:"user_id"`
	UserMultiID        string         `db:"user_multi_id" json:"user_multi_id"`
	ResourceID         string         `db:"resource_id" json:"resource_id"`
	Email              string         `db:"email" json:"email"`
	Password           string         `db:"password" json:"password"`
	PostCode           string         `db:"post_code" json:"post_code"`
	Address            string         `db:"address" json:"address"`
	AddressKana        string         `db:"address_kana" json:"address_kana"`
	Tel                sql.NullString `db:"tel" json:"tel"`
	CreatedAt          time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt          time.Time      `db:"updated_at" json:"updated_at"`
	DeletedAt          sql.NullTime   `db:"deleted_at" json:"deleted_at"`
	PurgedExpiresAt    sql.NullTime   `db:"purged_expires_at" json:"purged_expires_at"`
	ProvisionCreatedAt time.Time      `db:"provision_created_at" json:"provision_created_at"`
}

func (q *Queries) GetProvisionUser(ctx context.Context) ([]GetProvisionUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getProvisionUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProvisionUserRow
	for rows.Next() {
		var i GetProvisionUserRow
		if err := rows.Scan(
			&i.UserID,
			&i.UserMultiID,
			&i.ResourceID,
			&i.Email,
			&i.Password,
			&i.PostCode,
			&i.Address,
			&i.AddressKana,
			&i.Tel,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PurgedExpiresAt,
			&i.ProvisionCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
