// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package sqlcmodel

import (
	"context"
	"database/sql"
	"time"
	"github.com/uptrace/bun"
)

const getActiveUser = `-- name: GetActiveUser :many
SELECT
    u.id,
    p.user_id, p.user_multi_id, p.resource_id, p.email, p.password, p.post_code, p.address, p.address_kana, p.tel, p.created_at, p.updated_at, p.deleted_at, p.purged_expires_at,
    a.created_at AS activated_at
FROM user_actives a
JOIN users u ON a.user_id = u.id
LEFT JOIN user_profiles p ON u.id = p.user_id
LEFT JOIN user_provision pr ON u.id = pr.user_id
LEFT JOIN user_deletes d ON u.id = d.user_id
`

type GetActiveUserRow struct {
	bun.BaseModel
	ID		int64		`db:"id" json:"id" bun:"i_d"`
	UserID		sql.NullInt64	`db:"user_id" json:"user_id" bun:"user_i_d"`
	UserMultiID	sql.NullString	`db:"user_multi_id" json:"user_multi_id" bun:"user_multi_i_d"`
	ResourceID	sql.NullString	`db:"resource_id" json:"resource_id" bun:"resource_i_d"`
	Email		sql.NullString	`db:"email" json:"email" bun:"email"`
	Password	sql.NullString	`db:"password" json:"password" bun:"password"`
	PostCode	sql.NullString	`db:"post_code" json:"post_code" bun:"post_code"`
	Address		sql.NullString	`db:"address" json:"address" bun:"address"`
	AddressKana	sql.NullString	`db:"address_kana" json:"address_kana" bun:"address_kana"`
	Tel		sql.NullString	`db:"tel" json:"tel" bun:"tel"`
	CreatedAt	bun.NullTime	`db:"created_at" json:"created_at" bun:"created_at"`
	UpdatedAt	bun.NullTime	`db:"updated_at" json:"updated_at" bun:"updated_at"`
	DeletedAt	bun.NullTime	`db:"deleted_at" json:"deleted_at" bun:"deleted_at"`
	PurgedExpiresAt	bun.NullTime	`db:"purged_expires_at" json:"purged_expires_at" bun:"purged_expires_at"`
	ActivatedAt	time.Time	`db:"activated_at" json:"activated_at" bun:"activated_at"`
}

func (q *Queries) GetActiveUser(ctx context.Context) ([]GetActiveUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getActiveUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveUserRow
	for rows.Next() {
		var i GetActiveUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserMultiID,
			&i.ResourceID,
			&i.Email,
			&i.Password,
			&i.PostCode,
			&i.Address,
			&i.AddressKana,
			&i.Tel,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PurgedExpiresAt,
			&i.ActivatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeletedUser = `-- name: GetDeletedUser :many
SELECT
    u.id,
    p.user_id, p.user_multi_id, p.resource_id, p.email, p.password, p.post_code, p.address, p.address_kana, p.tel, p.created_at, p.updated_at, p.deleted_at, p.purged_expires_at,
    d.created_at AS delete_created_at,
    d.purged_expires_at AS delete_purged_expires_at
FROM user_deletes d
JOIN users u ON d.user_id = u.id
LEFT JOIN user_profiles p ON u.id = p.user_id
LEFT JOIN user_actives a ON u.id = a.user_id
LEFT JOIN user_provision pr ON u.id = pr.user_id
`

type GetDeletedUserRow struct {
	bun.BaseModel
	ID			int64		`db:"id" json:"id" bun:"i_d"`
	UserID			sql.NullInt64	`db:"user_id" json:"user_id" bun:"user_i_d"`
	UserMultiID		sql.NullString	`db:"user_multi_id" json:"user_multi_id" bun:"user_multi_i_d"`
	ResourceID		sql.NullString	`db:"resource_id" json:"resource_id" bun:"resource_i_d"`
	Email			sql.NullString	`db:"email" json:"email" bun:"email"`
	Password		sql.NullString	`db:"password" json:"password" bun:"password"`
	PostCode		sql.NullString	`db:"post_code" json:"post_code" bun:"post_code"`
	Address			sql.NullString	`db:"address" json:"address" bun:"address"`
	AddressKana		sql.NullString	`db:"address_kana" json:"address_kana" bun:"address_kana"`
	Tel			sql.NullString	`db:"tel" json:"tel" bun:"tel"`
	CreatedAt		bun.NullTime	`db:"created_at" json:"created_at" bun:"created_at"`
	UpdatedAt		bun.NullTime	`db:"updated_at" json:"updated_at" bun:"updated_at"`
	DeletedAt		bun.NullTime	`db:"deleted_at" json:"deleted_at" bun:"deleted_at"`
	PurgedExpiresAt		bun.NullTime	`db:"purged_expires_at" json:"purged_expires_at" bun:"purged_expires_at"`
	DeleteCreatedAt		time.Time	`db:"delete_created_at" json:"delete_created_at" bun:"delete_created_at"`
	DeletePurgedExpiresAt	bun.NullTime	`db:"delete_purged_expires_at" json:"delete_purged_expires_at" bun:"delete_purged_expires_at"`
}

func (q *Queries) GetDeletedUser(ctx context.Context) ([]GetDeletedUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeletedUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeletedUserRow
	for rows.Next() {
		var i GetDeletedUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserMultiID,
			&i.ResourceID,
			&i.Email,
			&i.Password,
			&i.PostCode,
			&i.Address,
			&i.AddressKana,
			&i.Tel,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PurgedExpiresAt,
			&i.DeleteCreatedAt,
			&i.DeletePurgedExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProvisionUser = `-- name: GetProvisionUser :many
SELECT
    u.id,
    p.user_id, p.user_multi_id, p.resource_id, p.email, p.password, p.post_code, p.address, p.address_kana, p.tel, p.created_at, p.updated_at, p.deleted_at, p.purged_expires_at,
    pr.created_at AS provision_created_at,
    pr.expired_at
FROM user_provision pr
JOIN users u ON pr.user_id = u.id
LEFT JOIN user_profiles p ON u.id = p.user_id
LEFT JOIN user_actives a ON u.id = a.user_id
LEFT JOIN user_deletes d ON u.id = d.user_id
`

type GetProvisionUserRow struct {
	bun.BaseModel
	ID			int64		`db:"id" json:"id" bun:"i_d"`
	UserID			sql.NullInt64	`db:"user_id" json:"user_id" bun:"user_i_d"`
	UserMultiID		sql.NullString	`db:"user_multi_id" json:"user_multi_id" bun:"user_multi_i_d"`
	ResourceID		sql.NullString	`db:"resource_id" json:"resource_id" bun:"resource_i_d"`
	Email			sql.NullString	`db:"email" json:"email" bun:"email"`
	Password		sql.NullString	`db:"password" json:"password" bun:"password"`
	PostCode		sql.NullString	`db:"post_code" json:"post_code" bun:"post_code"`
	Address			sql.NullString	`db:"address" json:"address" bun:"address"`
	AddressKana		sql.NullString	`db:"address_kana" json:"address_kana" bun:"address_kana"`
	Tel			sql.NullString	`db:"tel" json:"tel" bun:"tel"`
	CreatedAt		bun.NullTime	`db:"created_at" json:"created_at" bun:"created_at"`
	UpdatedAt		bun.NullTime	`db:"updated_at" json:"updated_at" bun:"updated_at"`
	DeletedAt		bun.NullTime	`db:"deleted_at" json:"deleted_at" bun:"deleted_at"`
	PurgedExpiresAt		bun.NullTime	`db:"purged_expires_at" json:"purged_expires_at" bun:"purged_expires_at"`
	ProvisionCreatedAt	time.Time	`db:"provision_created_at" json:"provision_created_at" bun:"provision_created_at"`
	ExpiredAt		time.Time	`db:"expired_at" json:"expired_at" bun:"expired_at"`
}

func (q *Queries) GetProvisionUser(ctx context.Context) ([]GetProvisionUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getProvisionUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProvisionUserRow
	for rows.Next() {
		var i GetProvisionUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserMultiID,
			&i.ResourceID,
			&i.Email,
			&i.Password,
			&i.PostCode,
			&i.Address,
			&i.AddressKana,
			&i.Tel,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PurgedExpiresAt,
			&i.ProvisionCreatedAt,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
