// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/v1/usertoken_api.proto

package userv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserEmail

	// no validation rules for Password

	if m.UserTel != nil {
		// no validation rules for UserTel
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageRooting

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on VerifyUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyUserRequestMultiError, or nil if none found.
func (m *VerifyUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VerifyMessage

	if len(errors) > 0 {
		return VerifyUserRequestMultiError(errors)
	}

	return nil
}

// VerifyUserRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyUserRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyUserRequestMultiError) AllErrors() []error { return m }

// VerifyUserRequestValidationError is the validation error returned by
// VerifyUserRequest.Validate if the designated constraints aren't met.
type VerifyUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyUserRequestValidationError) ErrorName() string {
	return "VerifyUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyUserRequestValidationError{}

// Validate checks the field values on VerifyUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyUserResponseMultiError, or nil if none found.
func (m *VerifyUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifyUserResponseValidationError{
					field:  "UserToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifyUserResponseValidationError{
					field:  "UserToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyUserResponseValidationError{
				field:  "UserToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerifyUserResponseMultiError(errors)
	}

	return nil
}

// VerifyUserResponseMultiError is an error wrapping multiple validation errors
// returned by VerifyUserResponse.ValidateAll() if the designated constraints
// aren't met.
type VerifyUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyUserResponseMultiError) AllErrors() []error { return m }

// VerifyUserResponseValidationError is the validation error returned by
// VerifyUserResponse.Validate if the designated constraints aren't met.
type VerifyUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyUserResponseValidationError) ErrorName() string {
	return "VerifyUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyUserResponseValidationError{}

// Validate checks the field values on CreateUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserProfileRequestMultiError, or nil if none found.
func (m *CreateUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserEmail

	// no validation rules for UserName

	// no validation rules for UserTel

	if len(errors) > 0 {
		return CreateUserProfileRequestMultiError(errors)
	}

	return nil
}

// CreateUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserProfileRequestMultiError) AllErrors() []error { return m }

// CreateUserProfileRequestValidationError is the validation error returned by
// CreateUserProfileRequest.Validate if the designated constraints aren't met.
type CreateUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserProfileRequestValidationError) ErrorName() string {
	return "CreateUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserProfileRequestValidationError{}

// Validate checks the field values on GetUserTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenRequestMultiError, or nil if none found.
func (m *GetUserTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserEmail

	// no validation rules for Password

	if len(errors) > 0 {
		return GetUserTokenRequestMultiError(errors)
	}

	return nil
}

// GetUserTokenRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenRequestMultiError) AllErrors() []error { return m }

// GetUserTokenRequestValidationError is the validation error returned by
// GetUserTokenRequest.Validate if the designated constraints aren't met.
type GetUserTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenRequestValidationError) ErrorName() string {
	return "GetUserTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenRequestValidationError{}

// Validate checks the field values on GetUserTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTokenResponseMultiError, or nil if none found.
func (m *GetUserTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserTokenResponseValidationError{
					field:  "UserToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserTokenResponseValidationError{
					field:  "UserToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserTokenResponseValidationError{
				field:  "UserToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserTokenResponseMultiError(errors)
	}

	return nil
}

// GetUserTokenResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTokenResponseMultiError) AllErrors() []error { return m }

// GetUserTokenResponseValidationError is the validation error returned by
// GetUserTokenResponse.Validate if the designated constraints aren't met.
type GetUserTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTokenResponseValidationError) ErrorName() string {
	return "GetUserTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTokenResponseValidationError{}
